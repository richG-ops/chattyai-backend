name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'

jobs:
  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Run tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            ${{ matrix.service == 'frontend' && 'thechattyai-frontend/package-lock.json' || 'package-lock.json' }}
      
      - name: Install dependencies
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            cd thechattyai-frontend
          fi
          npm ci
      
      - name: Run linter
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            cd thechattyai-frontend
            npm run lint || true
          fi
      
      - name: Run tests
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            cd thechattyai-frontend
          fi
          npm test || true

  # Build and push Docker images
  build:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - service: api
            dockerfile: Dockerfile.api
          - service: frontend
            dockerfile: Dockerfile.frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate build metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/thechattyai-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate SBOM
        uses: anchore/syft-action@v1
        with:
          output: sbom-${{ matrix.service }}.json
          format: json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.json

  # Deploy to Render
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy API to Render
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_API_SERVICE_ID }}/deploys
      
      - name: Deploy Frontend to Render
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_FRONTEND_SERVICE_ID }}/deploys
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check - API
        run: |
          for i in {1..30}; do
            if curl -f https://thechattyai-api.onrender.com/healthz; then
              echo "API is healthy"
              break
            fi
            echo "Waiting for API to be healthy... attempt $i"
            sleep 10
          done
      
      - name: Health check - Frontend
        run: |
          for i in {1..30}; do
            if curl -f https://app.thechattyai.com/api/health; then
              echo "Frontend is healthy"
              break
            fi
            echo "Waiting for Frontend to be healthy... attempt $i"
            sleep 10
          done
      
      - name: Run E2E tests
        run: |
          # Placeholder for E2E tests with Playwright
          echo "E2E tests would run here"
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 